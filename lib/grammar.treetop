grammar KanbanDSL

  rule stages
    (stage)+  {
      def stages
        elements
      end
    }
  end

  rule stage
    name ([\:] limit)? (cards_expr / substages_expr) ';' {
      def body
        elements[2]
      end
      def limit
        if !elements[1].text_value.empty?
          elements[1].elements[1].text_value.to_i
        else 
          nil
        end
      end
    }
  end

  rule substages_expr
    (substage)+ {
      def substages
        elements
      end
    }
  end

  rule substage
    [\[] name ([\:] limit)? cards_expr [\]] {
      def cards
        cards_expr.cards
      end
      def limit
        if !elements[2].text_value.empty?
          elements[2].elements[1].text_value.to_i
        else 
          nil
        end
      end
     }
  end

  rule cards_expr
    [\(] cards [\)]
  end

  rule cards
    (name [,]?)* 
  end

  rule name
    ([a-zA-Z0-9\s]+)
  end

  rule limit
    [0-9]+
  end

end
